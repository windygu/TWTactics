<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="OkButton.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAO
        wwAADsMBx2+oZAAAAyRJREFUOE91kl1Ik2EYhp8151xH2UbgQA8kEBeEIcxlgWW1Ncy1Wmo4y2qLXGv9
        aOhq+UOZ5tLWjz+btqbT1Vw2K8taRpqUYEGxOoigQorOrE46Cre7d58riOqGC773/e7nee73ez/6S3mU
        oKxXamv9tZ2uh6773WPdoTp/navwZGGxrEiWGHf9W3KrXNl4s/Gdf9qPwPMAgi+CGH45zD17J7045j32
        UX5Aro3b/9SK6hX7mkaa5tpCbega74JnyoOB6QH4nvnQN9UH14QLjnsOVF2uiqZsS6mOl80rzZiWX+Gu
        mKsZqsGpkVNoDbWi/VE7nBNOOB870THeAceYA6dHTsM2aIP6hDoqyhf9TrJAbpO/MVwxwHLNgppgDRru
        NKDpfhPsD+ywj9nRHGpG/VA92oJtOOw7DEOHAUkbkj7RUhJSqj5VmXU8C8XdxdjdvxvmgBmVw5Wwjlhh
        u2vjsAasCL8N4/az2zD2G1HaXorFWxcjaVVSMckOyuwSiwQFXQUo8hRhx9UdMF43wjRsgvmWGaaACU/C
        TxCNRjH6YhQlnhJoLmqwULcQ/JX8blpetTxAewk553OgcquweWAzdP06lF8rhz6ox4XRC4hEIvj89TMq
        g5VQu9VQtChAWgJPwXtAsiOyQaogJDckI7cnl5sw+WoS0++mofVoMfttFjOzM9D5dMj35WN1z2osOrpo
        vkEOL0SZhzKbYw3oOEF8TgyVV4Wn759ykSfCE/jy/Qs0AQ0UAQWy+7MhbhGD9jN/IYGfw++ijJ0Za0Um
        EdeA7ITEzkRI3VL0vexDJBrBrtFdyLiRAemAFIJLAlA98xkZSoJIIdoSu0ZeijklTFVs8wyjk9HL4vXy
        oLunA11lax/DzTjHqGZsZ9Pz+B8omwTcj7DMtCw3wZjwg2zspSNujhUNMvwML6OdEZtuYKgokrwmWcUV
        /5LMItPzjLwf3FHOMmJJehhORmxyLYPdFm2iOfFGsSle9qekZdJcYbnwNfeRYlFjzawMC6OMINAI3i7R
        LFkft/9XvDR92jrJHkmLsEx4XVgqHJKUSVrTS9LVVET8uCcuop/8F6jSzlkfUQAAAABJRU5ErkJggg==
</value>
  </data>
  <data name="SelectYourselfGroupbox.Text" xml:space="preserve">
    <value>Jezelf selecteren</value>
  </data>
  <data name="SelectYourVillagesMarkerGroupbox.Text" xml:space="preserve">
    <value>Zet de markering voor jouw dorpen</value>
  </data>
  <data name="SelectYourTribeMarkersGroupbox.Text" xml:space="preserve">
    <value>Zet de markering voor spelers in je stam</value>
  </data>
  <data name="WhySetMeGroupbox.Text" xml:space="preserve">
    <value>Waarom zou ik zeggen wie ik ben?</value>
  </data>
  <data name="WhySetMeLabel.Text" xml:space="preserve">
    <value>TWTactics reageert verschillend wanneer een dorp tot je stam, tot jezelf of tot de vijand behoort.

Vooral de aanvalsplanner kan je veel beter bijstaan wanneer je jezelf selecteert.

Je kan jezelf later nog altijd selecteren in het hoofdmenu.</value>
  </data>
  <data name="HowToMarkersWorkLabel.Text" xml:space="preserve">
    <value>Hieronder kan je specifiëren hoe precies je je eigen dorpen en de dorpen van jouw stam wil tonen op de kaart. De eerste is de hoofdkleur die gebruikt wordt als achtergrondkleur. De tweede, secundaire, kleur is optioneel.
Het idee is om een hoofdkleur zonder secundaire kleur te gebruiken om stammen te markeren en om spelers binnen die stam die je specifiek in de gaten wil houden dezelfde hoofdkleur maar met een sucundaire kleur te geven.</value>
  </data>
  <data name="HowDoMarkersWorkGroupbox.Text" xml:space="preserve">
    <value>Hoe werken de markeringen?</value>
  </data>
  <data name="$this.Text" xml:space="preserve">
    <value>Actieve speler selecteren</value>
  </data>
</root>